# This is an example configuration file for ATESA containing the default values for every possible setting, grouped
# together based on type or use case. Lines are interpreted as if they were python code (which means comments starting
# with '#' and blank lines are ignored, and strings must be delimited by quotes) with the packages numpy and pytraj
# supported. See documentation for descriptions of each setting.
#
# setting_name = setting_value      # [<list of supported options, where applicable>]

# Core settings required for all jobs
job_type = 'aimless_shooting'       # ['aimless_shooting', 'committor_analysis', 'equilibrium_path_sampling', 'find_ts']
batch_system = 'slurm'              # ['slurm', 'pbs']
restart = False                     # [True, False]
md_engine = 'amber'                 # ['amber']
task_manager = 'simple'             # ['simple']
topology = '../test_data/test.prmtop'
working_directory = sys.path[0] + '/atesa/tests/test_temp'
overwrite = False                   # [True, False]

# Batch template settings, required if the corresponding template slot (minus the step type prefix) appears in
# <md_engine>_<batch_system>.tpl, and ignored otherwise. For instance, if {{ ppn }} appears in a batch file to be used,
# the options corresponding to each step type within the chosen job_type followed by '_ppn' (e.g., for aimless shooting,
# 'init_ppn' and 'prod_ppn') are required.
init_nodes = 1          # 'init' is a step type for aimless_shooting and equilibrium_path_sampling
init_ppn = 1
init_mem = '4000mb'
init_walltime = '00:30:00'
init_solver = 'sander'
prod_nodes = 1          # 'prod' is a step type for aimless_shooting, committor_analysis, and equilibrium_path_sampling
prod_ppn = 8
prod_mem = '4000mb'
prod_walltime = '02:00:00'
prod_solver = 'sander'

# File path settings (required for all jobs, but do have defaults)
path_to_input_files = sys.path[0] + '/atesa/data/input_files'
path_to_templates = sys.path[0] + '/atesa/data/templates'

# Required only for aimless shooting, equilibrium path sampling, and committor analysis
cvs = ['pytraj.distance(traj, \'@1 @2\')[0]', 'pytraj.angle(traj, \'@2 @3 @4\')[0]']
auto_cvs_radius = 0
auto_cvs_exclude_water = False
include_qdot = True                 # [True, False]

# Required only for aimless shooting, find_TS, and equilibrium path sampling
initial_coordinates = ['../test_data/test.rst7', '../test_data/test_two_init.rst7']

# Required only for aimless shooting, find TS, and committor analysis
commit_fwd = ([1, 2], [3, 4], [1.5, 2.0], ['lt', 'gt'])
commit_bwd = ([1, 2], [3, 4], [2.0, 1.5], ['gt', 'lt'])

# Required only for committor analysis and equilibrium path sampling
rc_definition = '1.00 + 2.34*CV1 - 5.67*CV2'
as_out_file = 'as.out'
rc_reduced_cvs = True               # [True, False]

# Required only for aimless shooting
min_dt = 1
max_dt = 10
always_new = True                   # [True, False]
resample = False                    # [True, False]
degeneracy = 10
cleanup = False                     # [True, False]
information_error_checking = False  # [True, False]
information_error_freq = 250        # required only if information_error_checking = True
information_error_override = False  # [True, False]; required only if information_error_checking = True
max_moves = -1

# Required only for committor analysis
committor_analysis_n = 10
committor_analysis_use_rc_out = True    # [True, False]; path_to_rc_out and rc_threshold required only if True; initial_coordinates required if False
path_to_rc_out = sys.path[0] + '/atesa/tests/test_data/rc.out'
rc_threshold = 0.05

# Required only for equilibrium path sampling
eps_rc_min = -12
eps_rc_max = 12
eps_rc_step = 1
eps_rc_overlap = 0.1
eps_n_steps = 6
eps_out_freq = 1
eps_dynamic_seed = 20               # int or list (int -> [int for window in eps_windows]; 0 or empty list turns off)
samples_per_window = -1

# Required only if restart = True
restart_terminated_threads = False
